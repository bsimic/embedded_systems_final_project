
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000003a6  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000422  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ddf  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e2  00000000  00000000  00001327  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000077f  00000000  00000000  00001c09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e4  00000000  00000000  00002388  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000443  00000000  00000000  0000256c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006a6  00000000  00000000  000029af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00003055  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__vector_14>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  7a:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  82:	97 9a       	sbi	0x12, 7	; 18
  84:	00 c0       	rjmp	.+0      	; 0x86 <toggle_e+0x4>
  86:	97 98       	cbi	0x12, 7	; 18
  88:	08 95       	ret

0000008a <lcd_write>:
  8a:	cf 93       	push	r28
  8c:	c8 2f       	mov	r28, r24
  8e:	66 23       	and	r22, r22
  90:	11 f0       	breq	.+4      	; 0x96 <lcd_write+0xc>
  92:	95 9a       	sbi	0x12, 5	; 18
  94:	01 c0       	rjmp	.+2      	; 0x98 <lcd_write+0xe>
  96:	95 98       	cbi	0x12, 5	; 18
  98:	96 98       	cbi	0x12, 6	; 18
  9a:	bc 9a       	sbi	0x17, 4	; 23
  9c:	bd 9a       	sbi	0x17, 5	; 23
  9e:	be 9a       	sbi	0x17, 6	; 23
  a0:	bf 9a       	sbi	0x17, 7	; 23
  a2:	c7 98       	cbi	0x18, 7	; 24
  a4:	c6 98       	cbi	0x18, 6	; 24
  a6:	c5 98       	cbi	0x18, 5	; 24
  a8:	c4 98       	cbi	0x18, 4	; 24
  aa:	cc 23       	and	r28, r28
  ac:	0c f4       	brge	.+2      	; 0xb0 <lcd_write+0x26>
  ae:	c7 9a       	sbi	0x18, 7	; 24
  b0:	c6 fd       	sbrc	r28, 6
  b2:	c6 9a       	sbi	0x18, 6	; 24
  b4:	c5 fd       	sbrc	r28, 5
  b6:	c5 9a       	sbi	0x18, 5	; 24
  b8:	c4 fd       	sbrc	r28, 4
  ba:	c4 9a       	sbi	0x18, 4	; 24
  bc:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  c0:	c7 98       	cbi	0x18, 7	; 24
  c2:	c6 98       	cbi	0x18, 6	; 24
  c4:	c5 98       	cbi	0x18, 5	; 24
  c6:	c4 98       	cbi	0x18, 4	; 24
  c8:	c3 fd       	sbrc	r28, 3
  ca:	c7 9a       	sbi	0x18, 7	; 24
  cc:	c2 fd       	sbrc	r28, 2
  ce:	c6 9a       	sbi	0x18, 6	; 24
  d0:	c1 fd       	sbrc	r28, 1
  d2:	c5 9a       	sbi	0x18, 5	; 24
  d4:	c0 fd       	sbrc	r28, 0
  d6:	c4 9a       	sbi	0x18, 4	; 24
  d8:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  dc:	c4 9a       	sbi	0x18, 4	; 24
  de:	c5 9a       	sbi	0x18, 5	; 24
  e0:	c6 9a       	sbi	0x18, 6	; 24
  e2:	c7 9a       	sbi	0x18, 7	; 24
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <lcd_read>:
  e8:	88 23       	and	r24, r24
  ea:	11 f0       	breq	.+4      	; 0xf0 <lcd_read+0x8>
  ec:	95 9a       	sbi	0x12, 5	; 18
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <lcd_read+0xa>
  f0:	95 98       	cbi	0x12, 5	; 18
  f2:	96 9a       	sbi	0x12, 6	; 18
  f4:	bc 98       	cbi	0x17, 4	; 23
  f6:	bd 98       	cbi	0x17, 5	; 23
  f8:	be 98       	cbi	0x17, 6	; 23
  fa:	bf 98       	cbi	0x17, 7	; 23
  fc:	97 9a       	sbi	0x12, 7	; 18
  fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_read+0x18>
 100:	b4 9b       	sbis	0x16, 4	; 22
 102:	02 c0       	rjmp	.+4      	; 0x108 <lcd_read+0x20>
 104:	80 e1       	ldi	r24, 0x10	; 16
 106:	01 c0       	rjmp	.+2      	; 0x10a <lcd_read+0x22>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	b5 99       	sbic	0x16, 5	; 22
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	b6 99       	sbic	0x16, 6	; 22
 110:	80 64       	ori	r24, 0x40	; 64
 112:	b7 99       	sbic	0x16, 7	; 22
 114:	80 68       	ori	r24, 0x80	; 128
 116:	97 98       	cbi	0x12, 7	; 18
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_read+0x32>
 11a:	97 9a       	sbi	0x12, 7	; 18
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_read+0x36>
 11e:	b4 99       	sbic	0x16, 4	; 22
 120:	81 60       	ori	r24, 0x01	; 1
 122:	b5 99       	sbic	0x16, 5	; 22
 124:	82 60       	ori	r24, 0x02	; 2
 126:	b6 99       	sbic	0x16, 6	; 22
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	b7 99       	sbic	0x16, 7	; 22
 12c:	88 60       	ori	r24, 0x08	; 8
 12e:	97 98       	cbi	0x12, 7	; 18
 130:	08 95       	ret

00000132 <lcd_waitbusy>:
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_read>
 138:	88 23       	and	r24, r24
 13a:	dc f3       	brlt	.-10     	; 0x132 <lcd_waitbusy>
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_waitbusy+0xe>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_read>
 14a:	08 95       	ret

0000014c <lcd_command>:
 14c:	cf 93       	push	r28
 14e:	c8 2f       	mov	r28, r24
 150:	0e 94 99 00 	call	0x132	; 0x132 <lcd_waitbusy>
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	8c 2f       	mov	r24, r28
 158:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_write>
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <lcd_gotoxy>:
 160:	61 11       	cpse	r22, r1
 162:	04 c0       	rjmp	.+8      	; 0x16c <lcd_gotoxy+0xc>
 164:	80 58       	subi	r24, 0x80	; 128
 166:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
 16a:	08 95       	ret
 16c:	80 54       	subi	r24, 0x40	; 64
 16e:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
 172:	08 95       	ret

00000174 <lcd_clrscr>:
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
 17a:	08 95       	ret

0000017c <lcd_putc>:
 17c:	cf 93       	push	r28
 17e:	c8 2f       	mov	r28, r24
 180:	0e 94 99 00 	call	0x132	; 0x132 <lcd_waitbusy>
 184:	ca 30       	cpi	r28, 0x0A	; 10
 186:	49 f4       	brne	.+18     	; 0x19a <lcd_putc+0x1e>
 188:	80 34       	cpi	r24, 0x40	; 64
 18a:	10 f0       	brcs	.+4      	; 0x190 <lcd_putc+0x14>
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	01 c0       	rjmp	.+2      	; 0x192 <lcd_putc+0x16>
 190:	80 e4       	ldi	r24, 0x40	; 64
 192:	80 58       	subi	r24, 0x80	; 128
 194:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <lcd_putc+0x26>
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	8c 2f       	mov	r24, r28
 19e:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_write>
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <lcd_puts>:
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	ec 01       	movw	r28, r24
 1ac:	21 96       	adiw	r28, 0x01	; 1
 1ae:	fc 01       	movw	r30, r24
 1b0:	80 81       	ld	r24, Z
 1b2:	88 23       	and	r24, r24
 1b4:	29 f0       	breq	.+10     	; 0x1c0 <lcd_puts+0x1a>
 1b6:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_putc>
 1ba:	89 91       	ld	r24, Y+
 1bc:	81 11       	cpse	r24, r1
 1be:	fb cf       	rjmp	.-10     	; 0x1b6 <lcd_puts+0x10>
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1ce:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1d0:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1d2:	8f 9a       	sbi	0x11, 7	; 17
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1d4:	bc 9a       	sbi	0x17, 4	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1d6:	bd 9a       	sbi	0x17, 5	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1d8:	be 9a       	sbi	0x17, 6	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1da:	bf 9a       	sbi	0x17, 7	; 23
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1dc:	e0 e3       	ldi	r30, 0x30	; 48
 1de:	f3 e7       	ldi	r31, 0x73	; 115
 1e0:	31 97       	sbiw	r30, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_init+0x1a>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1e4:	c5 9a       	sbi	0x18, 5	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1e6:	c4 9a       	sbi	0x18, 4	; 24
    lcd_e_toggle();
 1e8:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ec:	e0 ef       	ldi	r30, 0xF0	; 240
 1ee:	f3 e2       	ldi	r31, 0x23	; 35
 1f0:	31 97       	sbiw	r30, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1f4:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1f8:	c5 e7       	ldi	r28, 0x75	; 117
 1fa:	d0 e0       	ldi	r29, 0x00	; 0
 1fc:	fe 01       	movw	r30, r28
 1fe:	31 97       	sbiw	r30, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 202:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 206:	fe 01       	movw	r30, r28
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 20c:	c4 98       	cbi	0x18, 4	; 24
    lcd_e_toggle();
 20e:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 212:	21 97       	sbiw	r28, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 216:	88 e2       	ldi	r24, 0x28	; 40
 218:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 21c:	88 e0       	ldi	r24, 0x08	; 8
 21e:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 222:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 226:	86 e0       	ldi	r24, 0x06	; 6
 228:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 22c:	81 2f       	mov	r24, r17
 22e:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_command>

}/* lcd_init */
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	08 95       	ret

0000023a <writeLCD>:
#include <avr/interrupt.h>
#include <stdlib.h>

#include "lcd.h"

void writeLCD(uint16_t adc) {
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	60 97       	sbiw	r28, 0x10	; 16
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	f8 94       	cli
 24c:	de bf       	out	0x3e, r29	; 62
 24e:	0f be       	out	0x3f, r0	; 63
 250:	cd bf       	out	0x3d, r28	; 61
 252:	8c 01       	movw	r16, r24
	lcd_clrscr();
 254:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_clrscr>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 258:	4a e0       	ldi	r20, 0x0A	; 10
 25a:	be 01       	movw	r22, r28
 25c:	6f 5f       	subi	r22, 0xFF	; 255
 25e:	7f 4f       	sbci	r23, 0xFF	; 255
 260:	c8 01       	movw	r24, r16
 262:	0e 94 9c 01 	call	0x338	; 0x338 <__itoa_ncheck>

	char adcStr[16];
	itoa(adc, adcStr, 10);
	lcd_puts(adcStr);
 266:	ce 01       	movw	r24, r28
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_puts>
	if(adc > 300) {
 26e:	0d 32       	cpi	r16, 0x2D	; 45
 270:	11 40       	sbci	r17, 0x01	; 1
 272:	48 f0       	brcs	.+18     	; 0x286 <writeLCD+0x4c>
		lcd_gotoxy(2,1);
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_gotoxy>
		lcd_puts("DAN");
 27c:	80 e6       	ldi	r24, 0x60	; 96
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_puts>
 284:	08 c0       	rjmp	.+16     	; 0x296 <writeLCD+0x5c>
	} else {
		lcd_gotoxy(2,1);
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	82 e0       	ldi	r24, 0x02	; 2
 28a:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_gotoxy>
		lcd_puts("NOC");
 28e:	84 e6       	ldi	r24, 0x64	; 100
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_puts>
	} 
	
}
 296:	60 96       	adiw	r28, 0x10	; 16
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	f8 94       	cli
 29c:	de bf       	out	0x3e, r29	; 62
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	cd bf       	out	0x3d, r28	; 61
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	08 95       	ret

000002ac <__vector_14>:

ISR(ADC_vect) {
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
 2b6:	2f 93       	push	r18
 2b8:	3f 93       	push	r19
 2ba:	4f 93       	push	r20
 2bc:	5f 93       	push	r21
 2be:	6f 93       	push	r22
 2c0:	7f 93       	push	r23
 2c2:	8f 93       	push	r24
 2c4:	9f 93       	push	r25
 2c6:	af 93       	push	r26
 2c8:	bf 93       	push	r27
 2ca:	ef 93       	push	r30
 2cc:	ff 93       	push	r31
	writeLCD(ADC);
 2ce:	84 b1       	in	r24, 0x04	; 4
 2d0:	95 b1       	in	r25, 0x05	; 5
 2d2:	0e 94 1d 01 	call	0x23a	; 0x23a <writeLCD>
}
 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	bf 91       	pop	r27
 2dc:	af 91       	pop	r26
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	7f 91       	pop	r23
 2e4:	6f 91       	pop	r22
 2e6:	5f 91       	pop	r21
 2e8:	4f 91       	pop	r20
 2ea:	3f 91       	pop	r19
 2ec:	2f 91       	pop	r18
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <main>:

int main(void)
{
	DDRD = _BV(4);
 2f8:	80 e1       	ldi	r24, 0x10	; 16
 2fa:	81 bb       	out	0x11, r24	; 17

	TCCR1A = _BV(COM1B1) | _BV(WGM11) | _BV(WGM10);
 2fc:	83 e2       	ldi	r24, 0x23	; 35
 2fe:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS11);
 300:	8a e1       	ldi	r24, 0x1A	; 26
 302:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 92;
 304:	8c e5       	ldi	r24, 0x5C	; 92
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	9b bd       	out	0x2b, r25	; 43
 30a:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 31;
 30c:	8f e1       	ldi	r24, 0x1F	; 31
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	99 bd       	out	0x29, r25	; 41
 312:	88 bd       	out	0x28, r24	; 40

	lcd_init(LCD_DISP_ON);
 314:	8c e0       	ldi	r24, 0x0C	; 12
 316:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_init>

	TCCR0 = _BV(WGM01) | _BV(CS02) | _BV(CS00);
 31a:	8d e0       	ldi	r24, 0x0D	; 13
 31c:	83 bf       	out	0x33, r24	; 51
	OCR0 = 180;
 31e:	84 eb       	ldi	r24, 0xB4	; 180
 320:	8c bf       	out	0x3c, r24	; 60

	TIMSK |= _BV(OCIE0);
 322:	89 b7       	in	r24, 0x39	; 57
 324:	82 60       	ori	r24, 0x02	; 2
 326:	89 bf       	out	0x39, r24	; 57

	ADMUX = _BV(REFS1) | _BV(REFS0);
 328:	80 ec       	ldi	r24, 0xC0	; 192
 32a:	87 b9       	out	0x07, r24	; 7
	ADCSRA = _BV(ADEN) | _BV(ADATE) | _BV(ADIE) | _BV(ADPS2) | _BV(ADPS1) ;
 32c:	8e ea       	ldi	r24, 0xAE	; 174
 32e:	86 b9       	out	0x06, r24	; 6
	SFIOR = _BV(ADTS1) | _BV(ADTS0);
 330:	80 e6       	ldi	r24, 0x60	; 96
 332:	80 bf       	out	0x30, r24	; 48

	sei();
 334:	78 94       	sei

	while (1);
 336:	ff cf       	rjmp	.-2      	; 0x336 <main+0x3e>

00000338 <__itoa_ncheck>:
 338:	bb 27       	eor	r27, r27
 33a:	4a 30       	cpi	r20, 0x0A	; 10
 33c:	31 f4       	brne	.+12     	; 0x34a <__itoa_ncheck+0x12>
 33e:	99 23       	and	r25, r25
 340:	22 f4       	brpl	.+8      	; 0x34a <__itoa_ncheck+0x12>
 342:	bd e2       	ldi	r27, 0x2D	; 45
 344:	90 95       	com	r25
 346:	81 95       	neg	r24
 348:	9f 4f       	sbci	r25, 0xFF	; 255
 34a:	0c 94 a8 01 	jmp	0x350	; 0x350 <__utoa_common>

0000034e <__utoa_ncheck>:
 34e:	bb 27       	eor	r27, r27

00000350 <__utoa_common>:
 350:	fb 01       	movw	r30, r22
 352:	55 27       	eor	r21, r21
 354:	aa 27       	eor	r26, r26
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	aa 1f       	adc	r26, r26
 35c:	a4 17       	cp	r26, r20
 35e:	10 f0       	brcs	.+4      	; 0x364 <__utoa_common+0x14>
 360:	a4 1b       	sub	r26, r20
 362:	83 95       	inc	r24
 364:	50 51       	subi	r21, 0x10	; 16
 366:	b9 f7       	brne	.-18     	; 0x356 <__utoa_common+0x6>
 368:	a0 5d       	subi	r26, 0xD0	; 208
 36a:	aa 33       	cpi	r26, 0x3A	; 58
 36c:	08 f0       	brcs	.+2      	; 0x370 <__utoa_common+0x20>
 36e:	a9 5d       	subi	r26, 0xD9	; 217
 370:	a1 93       	st	Z+, r26
 372:	00 97       	sbiw	r24, 0x00	; 0
 374:	79 f7       	brne	.-34     	; 0x354 <__utoa_common+0x4>
 376:	b1 11       	cpse	r27, r1
 378:	b1 93       	st	Z+, r27
 37a:	11 92       	st	Z+, r1
 37c:	cb 01       	movw	r24, r22
 37e:	0c 94 c1 01 	jmp	0x382	; 0x382 <strrev>

00000382 <strrev>:
 382:	dc 01       	movw	r26, r24
 384:	fc 01       	movw	r30, r24
 386:	67 2f       	mov	r22, r23
 388:	71 91       	ld	r23, Z+
 38a:	77 23       	and	r23, r23
 38c:	e1 f7       	brne	.-8      	; 0x386 <strrev+0x4>
 38e:	32 97       	sbiw	r30, 0x02	; 2
 390:	04 c0       	rjmp	.+8      	; 0x39a <strrev+0x18>
 392:	7c 91       	ld	r23, X
 394:	6d 93       	st	X+, r22
 396:	70 83       	st	Z, r23
 398:	62 91       	ld	r22, -Z
 39a:	ae 17       	cp	r26, r30
 39c:	bf 07       	cpc	r27, r31
 39e:	c8 f3       	brcs	.-14     	; 0x392 <strrev+0x10>
 3a0:	08 95       	ret

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
